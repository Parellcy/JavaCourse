package _4ElementaryProgramming._5MethodRecursion;

public class Main {
    public static void main(String[] args) {
        //方法递归调用

        //打印问题
        System.out.println("\n==========");
        T t1 = new T();
        t1.test1(4);//输出结果：2，3，4
        /*解析
        判断4 > 2,test(4 - 1);判断3 > 2,test(3 - 1);判断2 = 2,结束test();
        此时要注意，n = 4 和 3时并未打印，原因是直接调用方法
        test方法递归调用结束，开始println 2 3 4;
         */
        //思考：test2与以上结果的区别
        System.out.println("==========");
        t1.test2(5);

        //阶乘问题
        System.out.println("==========");
        int n = 5;
        System.out.println(n+"的阶乘为："+t1.factorial(n));

    }
}
/*方法递归
简单地说：递归就是方法 自己调用自己 ，每次调用时传入不同的变量
递归有助于编程者解决复杂的问题，同时让方法变得更简洁
 */

/*递归重要规则
1.执行一个方法时，就创建了一个新的受保护的独立空间（栈空间）
2.如果方法的局部变量时独立的，不会相互影响
比如打印问题中的n变量，在不断创建新的栈空间的同时，每一个栈空间的n值独立，n = 4;n = 3;n = 2;
3.如果方法中使用的是引用类型变量（比如数组，传的是地址）就会共享该引用变量的数据
4.递归必须向退出递归的条件逼近，否则就是无限递归，出现死龟了
5.当一个方法执行完毕时，或者遇到return，就会返回
遵循谁调用，就将结果返回给谁，同时当方法执行完毕或返回时，该方法也就执行完毕
 */

/*个人理解
1.在方法递归中，return的使用尤为重要
    如果在定义方法是选取的为void，方法可以直接使用，然后返回最终结果
    如果明确了数据类型，若想要 使该方法循环递归 需要return 方法;并在合适的地方return 目标结果;
 */
